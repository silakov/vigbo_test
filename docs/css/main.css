/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

body {
  margin: 0;
  min-height: 100vh;
  min-width: 320px; }

* {
  box-sizing: border-box; }

.page {
  display: flex;
  min-height: 100vh;
  flex-direction: column;
  background-color: #f7f7f7; }
  @media only screen and (min-width: 640px) {
    .page--levi {
      flex-direction: row; } }

.main {
  flex: 1 0 auto;
  display: flex;
  align-items: center;
  justify-content: center; }

.header {
  display: flex;
  min-height: 78px;
  min-width: 300px;
  padding: 0 20px;
  align-items: center;
  position: relative;
  background-color: #fff; }
  @media only screen and (min-width: 640px) {
    .header--bruno {
      flex-direction: row; } }
  @media only screen and (min-width: 1024px) {
    .header--bruno {
      padding: 0 60px; } }
  @media only screen and (min-width: 640px) {
    .header--levi {
      padding: 20px;
      flex-direction: column;
      align-items: flex-start; } }
  @media only screen and (min-width: 1024px) {
    .header--levi {
      padding: 50px; } }
  .header__spacer {
    display: none;
    flex: 1 0 auto;
    min-width: 30px;
    min-height: 30px;
    order: 2; }
    @media only screen and (min-width: 640px) {
      .header__spacer {
        display: block; } }

.logo {
  margin: 0; }
  @media only screen and (min-width: 640px) {
    .logo--bruno {
      margin-right: 10px; }
      .logo--bruno svg {
        width: 100px; }
    .logo--levi {
      margin-bottom: 20px; } }
  @media only screen and (min-width: 1024px) {
    .logo--bruno {
      margin-right: 20px; }
      .logo--bruno svg {
        width: auto; } }
  .logo__link, .logo__image {
    display: block; }

.mobile-holder {
  display: flex;
  flex: 1 0 auto;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  background: #fff;
  padding: 50px 20px 20px;
  flex-direction: column;
  align-items: center; }
  .mobile-holder--closed-menu {
    display: none; }
  .mobile-holder--opened-menu {
    display: flex; }
  @media only screen and (min-width: 640px) {
    .mobile-holder {
      display: flex;
      position: static;
      padding: 0; }
      .mobile-holder--bruno {
        flex-direction: row; }
      .mobile-holder--levi {
        flex-direction: column;
        align-items: flex-start; } }

.mobile-buttons {
  display: flex;
  margin-left: auto;
  position: relative; }
  @media only screen and (min-width: 640px) {
    .mobile-buttons {
      display: none; } }
  .mobile-buttons__search {
    cursor: pointer;
    width: 30px;
    height: 30px;
    padding: 0;
    border: 0;
    margin-right: 10px;
    display: flex;
    justify-content: center;
    background: none; }
    .mobile-buttons__search--opened-menu {
      display: none; }
  .mobile-buttons__menu {
    cursor: pointer;
    width: 30px;
    height: 30px;
    padding: 0;
    border: 0;
    display: flex;
    background: none; }
    .mobile-buttons__menu path {
      fill: none;
      stroke: #000;
      stroke-width: 3;
      stroke-linecap: round;
      stroke-linejoin: round;
      --length: 24;
      --offset: -38;
      stroke-dasharray: var(--length) var(--total-length);
      stroke-dashoffset: var(--offset);
      transition: all 0.8s cubic-bezier(0.645, 0.045, 0.355, 1); }
    .mobile-buttons__menu--opened-menu svg .line--1,
    .mobile-buttons__menu--opened-menu svg .line--3 {
      --length: 22.627416998; }
    .mobile-buttons__menu--opened-menu svg .line--2 {
      --length: 0; }
    .mobile-buttons__menu .line--1,
    .mobile-buttons__menu .line--3 {
      --total-length: 126.64183044433594; }
    .mobile-buttons__menu .line--2 {
      --total-length: 70; }
    .mobile-buttons__menu--opened-menu svg .line--1,
    .mobile-buttons__menu--opened-menu svg .line--3 {
      --offset: -94.1149185097; }
    .mobile-buttons__menu--opened-menu svg .line--2 {
      --offset: -50; }

.nav {
  order: 3;
  width: 100%;
  text-align: center; }
  @media only screen and (min-width: 640px) {
    .nav {
      order: 1;
      width: auto;
      text-align: left; } }

.nav-link {
  color: #000;
  font-size: 16px;
  text-transform: uppercase;
  text-decoration: none;
  cursor: pointer; }
  .nav-link:hover {
    color: #ccc; }
  @media only screen and (min-width: 640px) {
    .nav-link {
      font-size: 9px; } }

.nav-list {
  margin: 0;
  padding: 0;
  list-style: none;
  display: flex;
  flex-direction: column; }
  @media only screen and (min-width: 640px) {
    .nav-list--bruno {
      flex-direction: row; } }
  .nav-list__item {
    display: flex;
    flex-direction: column;
    padding: 5px 0;
    position: relative; }
    .nav-list__item:hover .nav-drop {
      display: block; }
    @media only screen and (min-width: 640px) {
      .nav-list--bruno .nav-list__item {
        padding: 0 10px; }
      .nav-list--levi .nav-list__item {
        padding: 0; } }
    @media only screen and (min-width: 1024px) {
      .nav-list--bruno .nav-list__item {
        padding: 0 25px; } }
  .nav-list__link {
    padding: 13px 0;
    order: 1; }
    .nav-drop + .nav-list__link {
      pointer-events: none; }
      @media only screen and (min-width: 640px) {
        .nav-drop + .nav-list__link {
          pointer-events: initial; } }

.nav-drop {
  display: none;
  margin: 0;
  padding: 40px 0 17px;
  list-style: none;
  order: 2; }
  @media only screen and (min-width: 640px) {
    .nav-drop {
      padding: 0; }
      .nav-drop--bruno {
        position: absolute;
        left: 0;
        width: 120px;
        top: 100%; }
      .nav-drop--levi {
        padding-bottom: 16px; } }
  @media only screen and (min-width: 1024px) {
    .nav-drop--bruno {
      width: 160px; } }
  .nav-drop__item {
    padding: 5px 0; }
    @media only screen and (min-width: 640px) {
      .nav-list--bruno .nav-drop__item {
        padding: 0 10px;
        background-color: #fff;
        margin-bottom: 1px; } }
    @media only screen and (min-width: 1024px) {
      .nav-list--bruno .nav-drop__item {
        padding: 0 25px; } }
  .nav-drop__link {
    font-size: 9px;
    line-height: 10px;
    padding: 8px 0;
    display: block; }
    @media only screen and (min-width: 640px) {
      .nav-list--bruno .nav-drop__link {
        padding: 17px 0; } }

.search {
  display: inline-flex;
  position: relative;
  order: 1; }
  @media only screen and (min-width: 640px) {
    .search {
      order: 3; } }
  .search__label {
    width: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
    cursor: pointer; }
  .search__input {
    width: 0;
    padding: 0 0 0 30px;
    margin-left: -31px;
    line-height: 30px;
    height: 30px;
    border: 1px solid transparent; }
    .search:hover .search__input, .search__input:focus {
      width: 200px;
      padding: 0 10px 0 30px;
      border-color: #000;
      transition: width .3s linear, border-color .3s linear, padding .3s linear; }
      @media only screen and (min-width: 640px) {
        .search:hover .search__input, .search__input:focus {
          width: 150px; } }
      @media only screen and (min-width: 1024px) {
        .search:hover .search__input, .search__input:focus {
          width: 200px; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
